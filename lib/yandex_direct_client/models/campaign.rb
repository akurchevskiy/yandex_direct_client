=begin
#Swagger Petstore

#:dog: :cat: :rabbit: This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.

OpenAPI spec version: 1.0.0
Contact: apiteam@swagger.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.27
=end

require 'date'

module SwaggerClient
  class Campaign
    attr_accessor :id

    attr_accessor :name

    attr_accessor :start_date

    attr_accessor :type

    attr_accessor :status

    attr_accessor :state

    attr_accessor :status_payment

    attr_accessor :status_clarification

    attr_accessor :source_id

    attr_accessor :statistics

    attr_accessor :currency

    attr_accessor :funds

    attr_accessor :represented_by

    attr_accessor :daily_budget

    attr_accessor :end_date

    attr_accessor :negative_keywords

    attr_accessor :blocked_ips

    attr_accessor :excluded_sites

    attr_accessor :text_campaign

    attr_accessor :mobile_app_campaign

    attr_accessor :dynamic_text_campaign

    attr_accessor :cpm_banner_campaign

    attr_accessor :smart_campaign

    attr_accessor :client_info

    attr_accessor :notification

    attr_accessor :time_targeting

    attr_accessor :time_zone

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'Id',
        :'name' => :'Name',
        :'start_date' => :'StartDate',
        :'type' => :'Type',
        :'status' => :'Status',
        :'state' => :'State',
        :'status_payment' => :'StatusPayment',
        :'status_clarification' => :'StatusClarification',
        :'source_id' => :'SourceId',
        :'statistics' => :'Statistics',
        :'currency' => :'Currency',
        :'funds' => :'Funds',
        :'represented_by' => :'RepresentedBy',
        :'daily_budget' => :'DailyBudget',
        :'end_date' => :'EndDate',
        :'negative_keywords' => :'NegativeKeywords',
        :'blocked_ips' => :'BlockedIps',
        :'excluded_sites' => :'ExcludedSites',
        :'text_campaign' => :'TextCampaign',
        :'mobile_app_campaign' => :'MobileAppCampaign',
        :'dynamic_text_campaign' => :'DynamicTextCampaign',
        :'cpm_banner_campaign' => :'CpmBannerCampaign',
        :'smart_campaign' => :'SmartCampaign',
        :'client_info' => :'ClientInfo',
        :'notification' => :'Notification',
        :'time_targeting' => :'TimeTargeting',
        :'time_zone' => :'TimeZone'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'name' => :'Object',
        :'start_date' => :'Object',
        :'type' => :'Object',
        :'status' => :'Object',
        :'state' => :'Object',
        :'status_payment' => :'Object',
        :'status_clarification' => :'Object',
        :'source_id' => :'Object',
        :'statistics' => :'Object',
        :'currency' => :'Object',
        :'funds' => :'Object',
        :'represented_by' => :'Object',
        :'daily_budget' => :'Object',
        :'end_date' => :'Object',
        :'negative_keywords' => :'Object',
        :'blocked_ips' => :'Object',
        :'excluded_sites' => :'Object',
        :'text_campaign' => :'Object',
        :'mobile_app_campaign' => :'Object',
        :'dynamic_text_campaign' => :'Object',
        :'cpm_banner_campaign' => :'Object',
        :'smart_campaign' => :'Object',
        :'client_info' => :'Object',
        :'notification' => :'Object',
        :'time_targeting' => :'Object',
        :'time_zone' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::Campaign` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::Campaign`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'status_payment')
        self.status_payment = attributes[:'status_payment']
      end

      if attributes.key?(:'status_clarification')
        self.status_clarification = attributes[:'status_clarification']
      end

      if attributes.key?(:'source_id')
        self.source_id = attributes[:'source_id']
      end

      if attributes.key?(:'statistics')
        self.statistics = attributes[:'statistics']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'funds')
        self.funds = attributes[:'funds']
      end

      if attributes.key?(:'represented_by')
        self.represented_by = attributes[:'represented_by']
      end

      if attributes.key?(:'daily_budget')
        self.daily_budget = attributes[:'daily_budget']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'negative_keywords')
        self.negative_keywords = attributes[:'negative_keywords']
      end

      if attributes.key?(:'blocked_ips')
        self.blocked_ips = attributes[:'blocked_ips']
      end

      if attributes.key?(:'excluded_sites')
        self.excluded_sites = attributes[:'excluded_sites']
      end

      if attributes.key?(:'text_campaign')
        self.text_campaign = attributes[:'text_campaign']
      end

      if attributes.key?(:'mobile_app_campaign')
        self.mobile_app_campaign = attributes[:'mobile_app_campaign']
      end

      if attributes.key?(:'dynamic_text_campaign')
        self.dynamic_text_campaign = attributes[:'dynamic_text_campaign']
      end

      if attributes.key?(:'cpm_banner_campaign')
        self.cpm_banner_campaign = attributes[:'cpm_banner_campaign']
      end

      if attributes.key?(:'smart_campaign')
        self.smart_campaign = attributes[:'smart_campaign']
      end

      if attributes.key?(:'client_info')
        self.client_info = attributes[:'client_info']
      end

      if attributes.key?(:'notification')
        self.notification = attributes[:'notification']
      end

      if attributes.key?(:'time_targeting')
        self.time_targeting = attributes[:'time_targeting']
      end

      if attributes.key?(:'time_zone')
        self.time_zone = attributes[:'time_zone']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('Object', ['TEXT_CAMPAIGN', 'MOBILE_APP_CAMPAIGN', 'DYNAMIC_TEXT_CAMPAIGN', 'SMART_CAMPAIGN', 'UNKNOWN'])
      return false unless type_validator.valid?(@type)
      status_validator = EnumAttributeValidator.new('Object', ['ACCEPTED', 'DRAFT', 'MODERATION', 'REJECTED', 'UNKNOWN'])
      return false unless status_validator.valid?(@status)
      state_validator = EnumAttributeValidator.new('Object', ['ARCHIVED', 'CONVERTED', 'ENDED', 'OFF', 'ON', 'SUSPENDED'])
      return false unless state_validator.valid?(@state)
      status_payment_validator = EnumAttributeValidator.new('Object', ['DISALLOWED', 'ALLOWED'])
      return false unless status_payment_validator.valid?(@status_payment)
      currency_validator = EnumAttributeValidator.new('Object', ['RUB', 'BYN', 'CHF', 'EUR', 'KZT', 'TRY', 'UAH', 'USD'])
      return false unless currency_validator.valid?(@currency)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('Object', ['TEXT_CAMPAIGN', 'MOBILE_APP_CAMPAIGN', 'DYNAMIC_TEXT_CAMPAIGN', 'SMART_CAMPAIGN', 'UNKNOWN'])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('Object', ['ACCEPTED', 'DRAFT', 'MODERATION', 'REJECTED', 'UNKNOWN'])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('Object', ['ARCHIVED', 'CONVERTED', 'ENDED', 'OFF', 'ON', 'SUSPENDED'])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status_payment Object to be assigned
    def status_payment=(status_payment)
      validator = EnumAttributeValidator.new('Object', ['DISALLOWED', 'ALLOWED'])
      unless validator.valid?(status_payment)
        fail ArgumentError, "invalid value for \"status_payment\", must be one of #{validator.allowable_values}."
      end
      @status_payment = status_payment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency)
      validator = EnumAttributeValidator.new('Object', ['RUB', 'BYN', 'CHF', 'EUR', 'KZT', 'TRY', 'UAH', 'USD'])
      unless validator.valid?(currency)
        fail ArgumentError, "invalid value for \"currency\", must be one of #{validator.allowable_values}."
      end
      @currency = currency
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          start_date == o.start_date &&
          type == o.type &&
          status == o.status &&
          state == o.state &&
          status_payment == o.status_payment &&
          status_clarification == o.status_clarification &&
          source_id == o.source_id &&
          statistics == o.statistics &&
          currency == o.currency &&
          funds == o.funds &&
          represented_by == o.represented_by &&
          daily_budget == o.daily_budget &&
          end_date == o.end_date &&
          negative_keywords == o.negative_keywords &&
          blocked_ips == o.blocked_ips &&
          excluded_sites == o.excluded_sites &&
          text_campaign == o.text_campaign &&
          mobile_app_campaign == o.mobile_app_campaign &&
          dynamic_text_campaign == o.dynamic_text_campaign &&
          cpm_banner_campaign == o.cpm_banner_campaign &&
          smart_campaign == o.smart_campaign &&
          client_info == o.client_info &&
          notification == o.notification &&
          time_targeting == o.time_targeting &&
          time_zone == o.time_zone
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, start_date, type, status, state, status_payment, status_clarification, source_id, statistics, currency, funds, represented_by, daily_budget, end_date, negative_keywords, blocked_ips, excluded_sites, text_campaign, mobile_app_campaign, dynamic_text_campaign, cpm_banner_campaign, smart_campaign, client_info, notification, time_targeting, time_zone].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
